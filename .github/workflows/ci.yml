name: CI

on:
  push:
  pull_request:

permissions:
  contents: read
  actions: write

jobs:
  fmt-check:
    name: Format check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache cargo registry & target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo fmt --check
        run: cargo fmt -- --check

  lint-and-test:
    name: Clippy & Tests
    needs: fmt-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo fmt --check (redundant safety)
        run: cargo fmt -- --check

      - name: cargo clippy (with cli feature)
        run: cargo clippy --features cli -- -D warnings
        # If clippy is too strict in CI, consider removing `-D warnings` temporarily.

      - name: cargo test (with cli feature)
        run: cargo test --features cli --all-features

  run-sim-and-artifact:
    name: Run simulation & upload artifact
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run simulation (mg-cli)
        run: |
          # run the same command you have in your Makefile (simulation)
          cargo run --features cli --bin mg-cli -- sim --name ci --seed 1 --n 5 --out target/ledger.json

      - name: Show generated ledger (first lines)
        run: head -n 100 target/ledger.json || true

      - name: Upload ledger artifact
        uses: actions/upload-artifact@v4
        with:
          name: ledger-json
          path: target/ledger.json
